package main

import (
	"testing"

	"github.com/niluan304/leetcode/tests"
)

func Test_minCost(t *testing.T) {
	targetCaseNum := 0 // -1

	fs := []func(nums []int, k int) int{
		//bruteForce,
		minCost,
		//minCost2,
		//leetcode,
		//endlessCheng,
	}

	for _, f := range fs {
		err := tests.RunFunc(t, f, samples, targetCaseNum)
		if err != nil {
			t.Error(err)
		}
	}
}

var samples = `
[1,2,1,2,1,3,3]
2
8

[1,2,1,2,1]
2
6

[1,2,1,2,1]
5
10

[123,226,77,192,240,139,30,288,326,215,69,277,20,189,364,262,41,389,214,122,39,350,199,316,399,227,214,338,11,85,62,73,15,358,345,201,26,163,68,5,367,340,271,318,382,199,205,334,90,51,116,259,56,174,327,45,51,255,66,295,172,230,127,236,94,261,284,73,216,211,288,132,108,231,303,1,62,188,313,44,400,233,82,178,203,205,24,272,332,266,150,299,137,343,262,350,18,19,74,366,352,380,327,170,132,80,106,137,334,14,344,371,43,361,193,310,345,4,18,368,86,291,117,363,389,87,320,399,49,267,236,5,333,402,384,296,41,177,63,379,151,404,367,63,390,225,14,110,96,266,105,392,288,248,38,30,300,68,165,391,203,380,201,167,360,172,66,373,379,27,3,24,250,254,267,50,225,55,258,339,103,187,192,56,120,280,272,402,224,119,106,351,150,238,358,127,395,396,38,373,400,26,220,6,362,201,48,331,137,392,193,158,205,115,144,323,163,28,391,224,267,67,313,288,219,108,33,112,327,182,187,192,53,397,398,363,26,361,46,69,171,105,241,24,367,198,289,172,203,275,83,117,274,14,79,391,135,246,401,274,203,66,58,37,149,114,243,196,9,239,385,195,401,355,86,233,192,396,381,215,223,367,343,202,305,203,88,233,400,240,133,8,241,144,196,121,117,328,33,1,209,11,190,100,186,316,318,64,238,148,224,172,159,305,202,373,106,296,163,281,320,230,403,253,306,150,279,234,393,291,47,365,361,110,255,46,312,141,207,147,219,138,73,28,184,308,5,185,130,393,150,18,340,65,382,221,218,355,194,90,41,211,116,221,318,15,84,244,393,333,315,256,66,6,232,15,82,241,81,117,333,0,275,233,45,344,120,18,53,229,289,313,242,243,12,277,6,375,298,336,136,198,112,201,397,383,87,206,32,80,223,63,46,68,273,239,240,28,399,138,393,29,361,66,222,75,128,111,278,4,287,383,35,57,1,53,308,305,322,374,150,399,9,161,331,49,31,127,34,194,268,313,227,129,6,152,155,87,142,5,251,99,66,362,252,103,209,144,375,53,389,67,16,362,135,78,73,25,188,38,184,43,175,12,212,61,301,223,134,275,26,279,116,120,268,384,391,74,315,183,145,140,46,327,26,147,269,365,65,364,230,194,379,134,292,87,363,64,70,302,363,290,45,93,85,141,138,362,112,46,389,299,279,186,183,273,56,246,262,187,224,98,250,200,14,335,28,296,167,254,379,233,399,257,118,201,310,185,134,39,47,370,177,390,398,230,334,279,352,186,177,85,344,91,39,380,208,175,65,399,40,283,37,20,38,210,190,262,164,401,259,80,102,312,196,277,390,218,291,127,200,313,258,168,10,317,383,326,181,117,382,296,62,301,291,112,298,379,269,313,113,303,13,397,246,188,177,209,6,342,62,336,124,122,98,347,315,354,355,176,54,210,190,163,379,275,133,140,235,219,157,126,319,100,36,240,10,168,318,167,276,319,287,127,317,355,17,376,88,275,19,348,322,147,29,75,5,362,266,143,104,357,164,287,384,397,334,36,374,12,402,82,86,73,66,31,155,170,17,73,253,110,393,150,128,269,3,321,43,393,223,200,188,386,367,40,282,357,220,60,18,80,32,15,402,130,166,195,208,360,104,285,104,229,258,119,176,239,246,284,247,243,391,38,328,291,126,90,147,298,243,3,358,118,20,243,135,235,188,169,353,45,301,57,337,84,14,271,299,127,168,400,237,350,369,335,325,191,238,359,112,159,294,328,169,69,252,254,132,148,325,97,222,237,73,214,249,152,218,173,80,26,365,10,211,155,333,254,33,242,46]
546
1245

`
